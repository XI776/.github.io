<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>construct 构造函数</title>
      <link href="/2024/07/19/construct-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2024/07/19/construct-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>构造函数基本上是一种特殊类型的方法，在每次实例化对象时运行   </p><figure class="highlight cpp" data-language="cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp" data-language="cpp">CPP<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> X, Y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; Y &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Entity e;<br>e.<span class="hljs-built_in">print</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>此时结果应为未经初始化的值 ，看似时随机值，这是因为当我们实例化Entity，并为它分配内存时实际上并没有初始化那个内存，我们得到了那个内存空间里原来的那些东西<br>所以构造函数如下：</p><h2 id="没有返回类型，并且名称必须与类的名称相同-（有些语言例如Java，数据基本类型会自动初始化为0）"><a href="#没有返回类型，并且名称必须与类的名称相同-（有些语言例如Java，数据基本类型会自动初始化为0）" class="headerlink" title="没有返回类型，并且名称必须与类的名称相同     （有些语言例如Java，数据基本类型会自动初始化为0）"></a>没有返回类型，并且名称必须与类的名称相同     （有些语言例如Java，数据基本类型会自动初始化为0）</h2><figure class="highlight cpp" data-language="cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp" data-language="cpp">CPP<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> X, Y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Entity</span>()<br>&#123;<br>X = <span class="hljs-number">0.0f</span>;<br>Y = <span class="hljs-number">0.0f</span>;<br>&#125;<br><span class="hljs-built_in">Entity</span>(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)<br>&#123;<br>X = x;<br>Y = y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; X &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; Y &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Entity <span class="hljs-title">e</span><span class="hljs-params">(<span class="hljs-number">1.2</span>,<span class="hljs-number">5</span>)</span></span>;<br>e.<span class="hljs-built_in">print</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意，如果不实例化对象，constructors将不会运行，所以只用一个类的静态方法，它不会运行"><a href="#注意，如果不实例化对象，constructors将不会运行，所以只用一个类的静态方法，它不会运行" class="headerlink" title="注意，如果不实例化对象，constructors将不会运行，所以只用一个类的静态方法，它不会运行"></a>注意，如果不实例化对象，constructors将不会运行，所以只用一个类的静态方法，它不会运行</h3><h1 id="删除构造函数"><a href="#删除构造函数" class="headerlink" title="删除构造函数"></a>删除构造函数</h1><p>Entity() &#x3D; delete;    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>why</title>
      <link href="/2024/07/14/why/"/>
      <url>/2024/07/14/why/</url>
      
        <content type="html"><![CDATA[<pre><code>javascript/** * A simple implementation of a LinkedList in JavaScript */// Node class represents a node in the linked listclass Node &#123;  constructor(data) &#123;    this.data = data;    this.next = null;  &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2024/07/14/hello-world/"/>
      <url>/2024/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是我的正式第一篇博客哈哈哈，写博客配环境好不容易呀，根本不明白都是什么东西，花了很多时间和精力去学习如何使用hexo以及如何配置环境</p><p>下面是一个简单的C++代码示例：</p><pre><code>cpp    #include &lt;iostream&gt;int main()&#123;    std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;    return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无引号</title>
      <link href="/2024/07/14/%E6%97%A0%E5%BC%95%E5%8F%B7/"/>
      <url>/2024/07/14/%E6%97%A0%E5%BC%95%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>双引号</title>
      <link href="/2024/07/14/%E5%8F%8C%E5%BC%95%E5%8F%B7/"/>
      <url>/2024/07/14/%E5%8F%8C%E5%BC%95%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单引号</title>
      <link href="/2024/07/14/%E5%8D%95%E5%BC%95%E5%8F%B7/"/>
      <url>/2024/07/14/%E5%8D%95%E5%BC%95%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>I wish it is the last time</title>
      <link href="/2024/07/14/I-wish-it-is-the-last-time/"/>
      <url>/2024/07/14/I-wish-it-is-the-last-time/</url>
      
        <content type="html"><![CDATA[<ol><li>在单个文件中作用不太明显</li><li>如果有多个文件，用头文件很方便</li></ol><p><strong>头文件（Header files）</strong> 通常包含了接口和声明，在编译时被其他源文件包含。它们不同于实现文件（.cpp），而是为了告知编译器某些符号的存在及其类型。</p><p><strong>内联函数（inline functions）</strong> 是一种优化手段，告诉编译器在调用处将函数的代码直接插入，而不是跳转到函数定义处执行。这对于简单的小函数可以提高性能，但对于复杂的函数可能不划算，因为它增加了代码体积。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Header files 的重要性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大功告成</title>
      <link href="/2024/07/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90%EF%BC%81%EF%BC%81%EF%BC%81/"/>
      <url>/2024/07/14/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90%EF%BC%81%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<pre><code class="C">#include &lt;stdio.h&gt;int main()&#123;    printf(&quot;Hello, World&quot;);    return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 就是今天的今天 </tag>
            
            <tag> 我觉得我的博客搭建成功 </tag>
            
            <tag> 哪里有问题我请问呢 </tag>
            
            <tag> 我疯了 </tag>
            
            <tag> 不是为什么啊 </tag>
            
            <tag> 怎么如此奇怪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2024/07/13/%E5%8F%AF%E6%81%B6%E5%95%8A/"/>
      <url>/2024/07/13/%E5%8F%AF%E6%81%B6%E5%95%8A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文章链接</title>
      <link href="/2024/07/13/%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/07/13/%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一个博客</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
